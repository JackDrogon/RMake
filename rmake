#!/usr/bin/env ruby
# frozen_string_literal: true

RMAKEFILE = 'rmakefile'
ENV_INDENT = '_indent_'

module EnvHelper
  def v
    if _verbose >= 1
      yield if block_given?
    end
  end

  def vv
    if _verbose >= 2
      yield if block_given?
    end
  end

  def indent_space
    '  ' * @env[ENV_INDENT]
  end

  def incr_indent
    @env[ENV_INDENT] += 1
  end

  def decr_indent
    @env[ENV_INDENT] -= 1
  end

  private

  def _verbose
    @env.fetch('VERBOSE', 0).to_i
  end
end

class Env
  def initialize(table = {}, parent = nil)
    raise 'table is not Hash' if @table.is_a?(Hash)

    @table = table

    raise 'parent is not nil or Env' if !parent.nil? && !parent.is_a?(Env)

    @parent = parent
  end

  def include?(key)
    @table.include?(key) || @parent&.include?(key)
  end

  def fetch(key, default_value)
    if include?(key)
      self[key]
    else
      default_value
    end
  end

  def delete(key)
    @table.delete(key)
    @parent&.delete(key)
  end

  def [](key)
    @table[key] || @parent&.[](key)
  end

  def []=(key, value)
    if @table.include?(key)
      @table[key] = value
    elsif @parent&.include?(key)
      @parent[key] = value
    else
      @table[key] = value
    end
  end
end

class Task
  include EnvHelper

  def initialize(env, cmd)
    @env = env
    @cmd = cmd
    @echo = nil
  end

  def build
    cmd = _render_cmd
    _echo { puts "#{indent_space} --> #{cmd}" }
    system cmd
  end

  private

  def _render_cmd
    cmd = @cmd
    vars = cmd.scan(/\$\(([^)]*)\)/).flatten
    vars.each do |var_name|
      val = @env.fetch(var_name, '')
      cmd = cmd.sub(/\$\(([^)]*)\)/, val)
    end
    cmd
  end

  def _echo
    if @echo.nil?
      # nil run first
      @echo = true
      if @cmd.start_with?('@')
        @echo = false
        @cmd[0] = ''
      end
    end

    if @echo
      yield if block_given?
    end
  end
end

class Target
  include EnvHelper

  attr_reader :name, :deps

  def initialize(env, name, deps, cmds, target_map)
    @env = env
    @name = name
    @deps = deps
    @tasks = (cmds || []).map { |cmd| Task.new(env, cmd) }
    @target_map = target_map
    @need_rebuild = nil
  end

  def rebuild?
    @need_rebuild = _rebuild? if @need_rebuild.nil?
    @need_rebuild
  end

  def build
    return unless rebuild?

    v { puts "#{indent_space}Building target #{@name}" }

    _build_deps
    @tasks.each(&:build)
    @need_rebuild = false
  end

  private

  def _rebuild?
    return true unless File.exist?(@name)

    @deps.any? do |dep|
      # PHONY task
      return true unless File.exist?(dep)

      target = @target_map[dep]
      if target.nil?
        # File task
        File.mtime(@name) < File.mtime(dep)
      elsif target.rebuild?
        true
      else
        File.mtime(@name) < File.mtime(target.name)
      end
    end
  end

  def _build_deps
    incr_indent
    @deps.each do |dep|
      target = @target_map[dep]
      target&.build
    end
    decr_indent
  end
end

Token = Struct.new(:type, :data)

class Lexer
  ASSIGNMENT = 1
  DEPENDENCY = 2
  TASK = 3
  EOF = 4

  def initialize(env, rmakefile)
    @env = env
    @rmakefile = rmakefile
    @data = nil # buffer with lines
  end

  # nil is empty
  def next
    @data = File.readlines(@rmakefile) if @data.nil?

    line = @data.shift&.rstrip!
    if line.nil?
      Token.new(EOF, nil)
    elsif line.empty?
      self.next
    elsif line.start_with?("\t")
      # TASK
      line.lstrip!
      Token.new(TASK, line)
    elsif line.include?('=')
      Token.new(ASSIGNMENT, line)
    else
      # DEPENDENCY
      Token.new(DEPENDENCY, line)
    end
  end
end

class RMake
  include EnvHelper

  def initialize(env, rmakefile, target_name)
    @env = env
    @parser = Lexer.new(env, rmakefile)

    @target_name = target_name
    @target_map = {}

    _parse
  end

  def build
    @env[ENV_INDENT] = 0
    target = @target_map[@target_name]
    target&.build
    @env.delete(ENV_INDENT)
  end

  def list_targets
    @target_map.keys
  end

  def run
    # TODO: check target not found
    unless @target_name
      puts "target #{@target_name} not found"
      exit(1)
    end

    v { puts '-------------------------' }
    build
  end

  private

  def _parse
    current_target = nil
    first_target = nil
    all_deps = {}
    tasks = {}

    loop do
      token = @parser.next
      case token.type
      when Lexer::DEPENDENCY
        # "clean:" => ["clean"]
        # "total: 1.o 2.c 2.h 1.h" => ["total", "1.o 2.c 2.h 1.h"]
        # TODO: check end_with? ':'
        rules = token.data.split(':').map(&:strip)
        target_name = rules[0]
        first_target ||= target_name
        current_target = target_name
        target_deps = [] # default for clean: just no deps
        target_deps = rules[1].split.map(&:strip) unless rules.length == 1

        (all_deps[current_target] ||= []).concat(target_deps)
      when Lexer::TASK
        # ["gcc 1.o 2.c -o total"]
        unless current_target
          puts 'found rule before target'
          exit(1)
        end
        (tasks[current_target] ||= []) << token.data
      when Lexer::ASSIGNMENT
        # TODO: check error, such as "a="
        var_name, var_val = token.data.split('=').map(&:strip)
        @env[var_name] = var_val
        vv { puts "assign #{var_name} = #{var_val}" }
      when Lexer::EOF
        break
      end
    end

    @target_name ||= first_target
    all_deps.each do |name, deps|
      target = Target.new(@env, name, deps, tasks[name], @target_map)
      @target_map[name] = target
    end

    vv { pp @target_name }
    vv { pp all_deps }
    vv { pp tasks }
    vv { pp @env }
  end
end

def main
  target_name = nil
  target_name = ARGV[0] unless ARGV.empty?

  rmake = RMake.new(Env.new(ENV.to_h), RMAKEFILE, target_name)
  puts '================================='
  puts '----- list targets -----'
  puts rmake.list_targets
  puts '================================='

  rmake.run
end

main if $LAST_READ_LINE != __FILE__
